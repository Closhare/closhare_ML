name: FastAPI / Celery CI-CD

on:
  push:
    branches: [ "main" ]          # main 브랜치 push 시만 트리거

permissions:
  contents: read

# ────────────────────── 1) 이미지 빌드 + 푸시 ──────────────────────
jobs:
  build-push-image:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 🛠️ Build & Push Image
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/closhare_inference:latest
          docker build -t $IMAGE .
          docker push $IMAGE

# ────────────────────── 2) EC2에서 교체 실행 ──────────────────────
  deploy-on-ec2:
    needs: build-push-image
    runs-on: self-hosted  # EC2 러너

    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v4

      - name: 🔑 Docker Hub Login
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: 📥 Docker Pull (if not exists)
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/closhare_inference:latest
          if ! sudo docker image inspect $IMAGE > /dev/null 2>&1; then
            echo "📦 Image not found locally. Pulling..."
            sudo docker pull $IMAGE
          else
            echo "✅ Image already exists. Skipping pull."
          fi

      - name: 📝 Write .env file
        run: |
          cat <<EOF > .env
          API_KEY=${{ secrets.API_KEY }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          PINECONE_ENV=${{ secrets.PINECONE_ENV }}
          EOF

      - name: 🧹 Pre-clean Docker disk
        run: |
          echo "🧼 Cleaning up Docker system storage..."
          sudo docker system prune -a --volumes -f

      - name: 🏗️ Build Docker images
        run: docker compose build

      - name: 🚀 Deploy with docker-compose
        run: |
          docker compose down --remove-orphans || true
          docker compose up -d

      - name: 🧹 Image GC (Post-deploy)
        run: docker image prune -f
